//Ejercicio 9: Germinar
// Defin칤 una funci칩n germinar que tome por par치metro un string de plantines con flores y plantines (游꺔). El array debe comenzar con una flor. La funci칩n debe devolver un string con los plantines convertidos en flores. El plant칤n se debe convertir en la primera flor que encuentre a su izquierda. Ejemplo:

//VERSION REEMPLAZA POR UNA MISMA FLOR DETERMINADA DE A UNA POR VEZ
// const germinar = (string) => {
//     const plantines = string.split(" ");
//     const plantin="游꺔"
//     for(let i=0;i<plantines.length;i++){
//         if (plantines[i]===plantin){
//        plantines[i] = plantines[i].replaceAll(plantin, "游꺚");
//         } else {

//         }
//         console.log(plantines);
//     }
// }
// germinar('游꺙 游꺔 游꺝 游꺔 游꺚 游꺔 游꺙 游꺔 游꺝 游꺔 游꺚 游꺔')



//VERSION REEMPLAZA TODO POR UNA MISMA FLOR DETERMINADA
// const germinar = (string) => {
   
  
//     console.log(string.replace(/游꺔/g, "游꺚"))
                          
//   }
  
//   germinar('游꺙游꺔游꺝游꺔游꺚游꺔游꺙游꺔游꺝游꺔游꺚游꺔')
  


//VERSION SIMILAR INVERTIR CASO
// const germinar = (string) => {
//     const plantines = string.split(" ");
//     const plantin = "游꺔"
//     let nuevosPlantines="";

//     for(let i=0;i<plantines.length;i++){       
//         if(plantines[i]===plantin){
//             nuevosPlantines=nuevosPlantines+plantines[i].replace(plantin, "游꺙");
//         } else {
//             nuevosPlantines=nuevosPlantines+plantines[i];
//         }
//     }
//     console.log(nuevosPlantines);
// }

// germinar('游꺙 游꺔 游꺝 游꺔 游꺚 游꺔 游꺙 游꺔 游꺝 游꺔 游꺚 游꺔')



//Ejercicio 10: Comer
//Defin칤 una funci칩n comer que reciba como argumento un string que consista en plantas, un conejo y una se침al de prohibido. El conejo se come todas las plantas que hay a su derecha, hasta que se encuentra con la se침al de prohibido. El programa debe mostrar las plantas sobrevivientes, que son todas las que est치n a la izquierda del conejo (si hay) y a la derecha de la se침al (si hay). Ejemplo:

// const comer = (string)=> {
//     //const lista = prompt('ingrese verdudas');
//     const verduras = string.split(" ");
//     const indiceConejo = verduras.indexOf("游냟");
//     const indiceProhibido = verduras.indexOf("游뛂") + 1;
//     verduras.splice(indiceConejo, indiceProhibido-indiceConejo);
//     //console.log(verduras)
//     alert(verduras)
//   }
  
//    comer('游볫 游볿 游냟 游볫 游볫 游볫 游뛂');

//Ejercicio 11: Multiplicar
//Defin칤 una funci칩n multiplicar que reciba como argumentos un n칰mero multiplicador y un array de n칰meros numeros, y que devuelva un array donde cada elemento es el resultado del elemento del primer array (en la misma posici칩n) multiplicado por el n칰mero ingresado. Ejemplo:

// const multiplicar=(multiplicador, numeros) => {
    
//     for(let i=0; i<numeros.length; i++){
//       let nuevosNumeros=parseInt(multiplicador*numeros[i]);
//       console.log(nuevosNumeros)
//     }
    
//   }
//   multiplicar(2, [5, 7, 15, 22, 40])

  
//Ejercicio 12: Filtrar por longitud mayor a
//Defin칤 una funci칩n filtrarPorLongitud que tome por par치metro un n칰mero longitud y un array de strings palabras y que devuelva un array con las palabras que tengan una cantidad de letras mayor a longitud. Ejemplo:


// const filtrarPorLongitud = (numero, array) => {


//   let newArray=array.filter(array=> array.length > numero)

//     console.log(newArray);
  
// }

// filtrarPorLongitud(4,['dia','remolacha','azul','sorpresa','te','verde'])



//Ejercicio 13: Recortar

//Defin칤 una funci칩n recortar que reciba como argumentos un n칰mero cantidadLetras y un array de strings palabras y devuelva un array con las mismas palabras pero recortadas. Las palabras se recortan dejando cantidadLetras letras al iniciando, y recortando las dem치s. Por ejemplo, elefante recortada a 4 letras queda elef.

// const recortar = (cantidadLetras, palabras) =>{
 
//   for(let i=0; i<palabras.length; i++){
    
//     let nuevasPalabras=palabras[i].slice(0,cantidadLetras);
//     alert(nuevasPalabras);
    
//   }
  
// }

// recortar(4, ['elefante', 'dinosaurio', 'chocolate', 'avion', 'america'])


// Ejercicio 15: Obtener resultado
// Defin칤 una funci칩n obtenerResultado que tome por par치metros dos strings jugadoraA y jugadoraB con los nombres de cada jugadora respectivamente, y dos arrays de numeros puntajesA y puntajesB de la misma longitud. La funci칩n debe devolver un string con el nombre de la ganadora o Empate en caso de que no haya ninguna. Para eso, debe comparar las mismas posiciones de cada array de puntajes, y sumar puntos a la jugadora correspondiente dependiendo de quien tenga el puntaje m치s alto. Por ejemplo:

// const puntajesA = [3, 5, 2]
// const puntajesB = [4, 6, 2]

// puntajesA[0] vs. puntajesB[0] -> Gana B
// puntajesA[1] vs. puntajesB[1] -> Gana B
// puntajesA[2] vs. puntajesB[2] -> Empate

// Resultado final: Gana Jugadora B


